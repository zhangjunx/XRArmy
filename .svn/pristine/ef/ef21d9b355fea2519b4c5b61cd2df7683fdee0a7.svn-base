package com.xr.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.xr.configure.MethodLog;
import com.xr.entry.UnitList;
import com.xr.service.IUnitListService;
import com.xr.tools.ExcelUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@Controller
@RequestMapping("UnitList")
@Api(tags="UnitListController",description="接口标题：所属单位层接口")
public class UnitListController {
	@Autowired
	private IUnitListService ics;
	
	
	@ApiOperation(httpMethod="POST",value="接口说明：新增接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="unitname",value="所属单位名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="parentno",value="上一级id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="remark",value="备注",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="新增",remark="新增机构")
	@RequestMapping(value="/insert",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> insert(UnitList record,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			String unitno=record.getUnitno();
			UnitList data=ics.selectByPrimaryKeyService(unitno);
			if(data!=null && !"".equals(data)){
				map.put("flag", false);
				map.put("reason", "对不起，该编码已存在！");
				return map;
			}
			int t=Integer.parseInt(unitno.substring(unitno.length()-3));
			record.setSort(String.valueOf(t));
			int tt=unitno.length()%3==0?unitno.length()/3:0;
			record.setLevel(String.valueOf(tt));
			int i=ics.insertSelectiveService(record);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "添加成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "添加失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	
	
	@ApiOperation(httpMethod="POST",value="接口说明：修改接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="unitname",value="所属单位名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="parentno",value="上一级id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="remark",value="备注",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="修改",remark="修改机构")
	@RequestMapping(value="/update",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> update(UnitList record,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			int i=ics.updateByPrimaryKeySelectiveService(record);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "更新成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "更新失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	 
	@ApiOperation(httpMethod="POST",value="接口说明：查询接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path")})
	@RequestMapping(value="/query",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> query(String unitno,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			UnitList d=ics.selectByPrimaryKeyService(unitno); 
			if(d!=null && !"".equals(d)){
				map.put("flag", true);
				map.put("reason", "查询成功！");
				map.put("result", d);
			}else{
				map.put("flag", false);
				map.put("reason", "暂无数据可查！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	@ApiOperation(httpMethod="POST",value="接口说明：删除接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="删除",remark="删除机构")
	@RequestMapping(value="/delete",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> delete(String unitno,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			m.put("parentno", unitno);
			List<Map<String,Object>> list=ics.getListService(m);
			if(list!=null && list.size()>0){
				map.put("flag", false);
				map.put("reason", "对不起，该机构存在下一级，不能删除！");
				return map;
			}
			//判断机构下是否有绑定的用户、人员或车辆
			m.clear();
			m.put("unitno", unitno);
			List<Map<String,Object>> exist=ics.getExistService(m);
			if(exist!=null && exist.size()>0){
				map.put("flag", false);
				map.put("reason", "对不起，该机构下有绑定的用户、人员或车辆，不能删除！");
				return map;
			}
			int i=ics.deleteByPrimaryKeyService(unitno); 
			if(i>0){
				map.put("flag", true);
				map.put("reason", "删除成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "删除失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	/**
	 * 查询列表
	 * @param record
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：查询列表接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="unitname",value="所属单位名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="parentno",value="上一级id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="name",value="所属单位名称:模糊查询时的传参",required=false,dataType="String",paramType="path")})
	@RequestMapping(value="/getList",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getList(UnitList record,String parentid,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			if(loginid!=null && !"".equals(loginid) && "administrator".equals(loginid)){
				loginid="";
			}
			m.put("loginid", loginid);
			m.put("parentid", parentid);
			m.put("unitno", record.getUnitno());
			m.put("unitname",record.getUnitname());
			m.put("level",record.getLevel());
			m.put("parentno",record.getParentno());
			List<Map<String,Object>> list=ics.getListService(m);
			List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
			for(int i=0;i<list.size();i++){
				Map<String,Object> m1=list.get(i);
				String unitno=String.valueOf(m1.get("parentno"));
				if(unitno!=null && !"".equals(unitno) && !"null".equals(unitno)){
					UnitList data=ics.selectByPrimaryKeyService(unitno);
					if(data!=null && !"".equals(data)){
						m1.put("parentname", data.getUnitname());
					}
				}
				result.add(m1);
			}
			if(list!=null && list.size()>0){
				map.put("flag", true);
				map.put("reason", "查询成功！");
				map.put("result", result);
			}else{
				map.put("flag", false);
				map.put("reason", "暂无数据可查！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	 
	/**
	 * 获取下一级id
	 * @param parentno
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：获取下一级id接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="parentno",value="上一级id",required=false,dataType="String",paramType="path")})
	@RequestMapping(value="/getNextUnitno",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getNextUnitno(String parentno){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			m.put("parentno", parentno);
			String maxid=ics.getNextUnitnoService(m);
			String nextid="";
			if((parentno==null || "".equals(parentno)) && (maxid==null || "".equals(maxid))){
				//上级为空，最大id也为空，数据库没数据
				nextid="001";
			}else if((parentno==null ||"".equals(parentno)) && (maxid!=null && !"".equals(maxid))){
				//上级为空，有下一级
				map.put("flag", false);
				map.put("reason", "对不起，请先选定上一级！");
				map.put("result", nextid);
				return map;
			}else if(parentno!=null && !"".equals(parentno)&& (maxid==null || "".equals(maxid))){
				//上级不为空，最大值为空,没有下一级
				nextid=parentno+"001";
			}else if(parentno!=null && !"".equals(parentno) && maxid!=null && !"".equals(maxid)){
				//上级不为空，最大值不为为空,有下一级
				String s=maxid.substring(maxid.length()-3);
				if("999".equals(s)){
					map.put("flag", false);
					map.put("reason", "对不起，该单位下级已达到最大值！");
					map.put("result", maxid);
					return map;
				}
				String t=String.valueOf(Integer.valueOf(s)+1);
				if(t.length()==1){
					nextid=parentno+"00"+t;
				}else if(t.length()==2){
					nextid=parentno+"0"+t;
				}else if(t.length()==3){
					nextid=parentno+t;
				}
			} 
			map.put("flag", true);
			map.put("reason", "查询成功！");
			map.put("result", nextid);
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	
	/**
	 * 获取区域树
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：下拉树接口",notes="接口说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="unitname",value="所属单位名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="parentno",value="上一级id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="remark",value="备注",required=false,dataType="String",paramType="path")})
	@RequestMapping(value="/getTree",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getTree(String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			if(loginid!=null && !"".equals(loginid) && "administrator".equals(loginid)){
				loginid="";
			}
			m.put("loginid", loginid);
			List<Map<String,Object>> list=ics.getTreeService(m);
			if(list!=null && list.size()>0){
				map.put("flag", true);
				map.put("reason", "查询成功！");
				map.put("result", list);
			}else{
				map.put("flag", false);
				map.put("reason", "暂无数据可查！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end

		/**
		 * 读取Excel中的数据
		 * @param file
		 * @throws Exception 
		 */
		@ApiOperation(httpMethod="POST",value="接口说明：读取Excel文件的接口",notes="接口说明")
		@ApiImplicitParams({
			@ApiImplicitParam(name="file",value="excel文件：MultipartFile类型",required=true,dataType="MultipartFile类型",paramType="path"),
			@ApiImplicitParam(name="loginid",value="登录人id",required=false,dataType="String",paramType="path")})
		@ResponseBody
		@RequestMapping(value="/getExcel",method=RequestMethod.POST)
		public Map<String, Object> getExcel(@RequestParam MultipartFile file,String loginid){
			Map<String,Object> map=new HashMap<>();//定义一个map向前端返回数据
			try{
				List<String[]> list =  ExcelUtil.queryExcel(file);//获取表格中的所有数据
			    List<String[]> excel = new  ArrayList<String[]>();//让如数据
		           Iterator<String[]> it = list.iterator();//使用迭代器来循环list
		          while(it.hasNext()){//循环读取
		        	  String[] data =  it.next();//接手每一行excel中的数据
		            int i =  data.length;
		        	  if((data.length == 1) ||(data.length == 2)){//判断是否有一整行空值
		        		  it.remove();
		        	  }else{
		        		  excel.add(data);
		        	  }
		          }// end while
			     if(excel.size()==0){
			    	 map.put("flag", false);
			    	 map.put("reason", "暂无数据可查");
			      }else{
			    	  map.put("flag", true);
				      map.put("reason", "查询成功");
				      map.put("result", excel);
			      }
			}catch(Exception ex){
				 map.put("flag", false);
				 System.out.println(ex);
		    	 map.put("reason", "程序错误，请联系管理员！");
			}
		return map;
	 }//end
		
		/**
		 *  Excel确定导入
		 *  csc
		 */
		@ApiOperation(httpMethod="POST",value="接口说明：导入接口",notes="接口说明")
		@ApiImplicitParams({
			@ApiImplicitParam(name="str",value="封装的json字符串数据:{[{'unitno':'001001','unitname':'一战区','remark':'备注说明：unitno，unitname值不能为空，remark值可为空'},...]}",required=true,dataType="String",paramType="path"),
			@ApiImplicitParam(name="loginid",value="登录人账号",required=true,dataType="String",paramType="path")})
		@MethodLog(methodName="导入",remark="导入机构")
		@ResponseBody
		@RequestMapping(value="/addExcel",method=RequestMethod.POST)
		public Map<String, Object> addExcel(String str,String loginid){
			Map<String, Object> map = new HashMap<>();//定义一个Map返回给前段
			try{
				JSONArray list=JSONArray.parseArray(str);
				//用于放入已经存在的item
				List<String> haveunitno = new ArrayList<>();
				List<String> errorunitno = new ArrayList<>();
				List<Map<String, Object>> result=new  ArrayList<Map<String, Object>>();
				  for (int i = 0; i < list.size(); i++) {//for循环读取数据中的原材料编码
					  Map<String, Object> m1 = new HashMap<>();
					  Map<String, Object> m = new HashMap<>();
					  JSONObject obj=list.getJSONObject(i);
					 String unitno = String.valueOf(obj.get("unitno"));
					 String unitname = String.valueOf(obj.get("unitname"));
					 String remark = String.valueOf(obj.get("remark"));
					 int t=unitno.length()%3;
					 if(t!=0 && !"0".equals(t)){ 
						 //编码不合适，不符合规范 
						 errorunitno.add(unitno);
						 continue;
					 } 
					  //判断单位id是否存在
					 UnitList record =  ics.selectByPrimaryKeyService(unitno);
					 if(record!=null && !"".equals(record)){
						 //如果不等于空 证明已经存在了
						 haveunitno.add(unitno);
						 continue;
					 }
					 m1.put("unitno", unitno);
					 m1.put("unitname", unitname);
					 m1.put("remark", remark);
					 m1.put("level", unitno.length()/3);
					 m1.put("sort", Integer.valueOf(unitno.length()-3));
					 result.add(m1);
				   }//end for循环
				//分段插入
				 List<Map<String, Object>> pici = new ArrayList<Map<String, Object>>(); 
			     for (int i = 0; i < result.size(); i++) {
					int point=100;//定义一次添加多少个
					  pici.add(result.get(i));
		        	 if(point==pici.size() || i==result.size()-1){
		        		 ics.insertExcel(pici);
		        		 pici.clear();
		        	 }
				 }//end for循环    
				  if(result.size()==list.size()){
					  //如果编码没有重复的,就进行添加
					    map.put("flag", true);
						map.put("reason", "全部导入成功!");
						map.put("code", "200");
				   }else if(result.size()==0){//如果编码没有重复的,就进行添加
					    map.put("flag", false);
					    map.put("code", "201");
						map.put("reason", "对不起，全部导入失败，请检查被标注数据!");
						map.put("errorunitno", errorunitno);
						map.put("haveunitno", haveunitno);
				   }else{
					   map.put("flag", false);
					   map.put("code", "202");
					   map.put("reason", "有的导入成功，有的导入失败，请检查被标注数据！");
					   map.put("errorunitno", errorunitno);
					   map.put("haveunitno", haveunitno);
				   }
			}catch(Exception ex){
				 map.put("flag", false);
				 System.out.println(ex);
		    	 map.put("reason", "程序错误，请联系管理员！");
			}
			 
			return map;
		}//end
}
