package com.xr.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.xr.configure.MethodLog;
import com.alibaba.fastjson.JSON;
import com.xr.entry.UserData;
import com.xr.service.IUserDataService;
import com.xr.tools.ImageSizeUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@Controller
@RequestMapping("UserData")
@Api(tags="UserDataController",description="接口标题：用户层接口")
public class UserDataController {
    private static Logger logger = LoggerFactory.getLogger(UserDataController.class);
	
	@Autowired
	private HttpServletRequest request;
	 
	@Autowired
	private HttpServletResponse response;
	
	@Autowired
	private HttpSession session;
    
	@Autowired
	private IUserDataService iuds;
	
	/**
	 * 登录接口 BS端
	 * @param userid
	 * @param userpass
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：登录接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="userpass",value="用户名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="loginid",value="用户id：登录人的账号",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="登录",remark="用户登录")
	@RequestMapping(value="/loginCheck",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> loginCheck(String userid,String userpass,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try{
			if(userid==null || "".equals(userid) || userpass==null || "".equals(userpass)){
				map.put("flag", false);
				map.put("reason", "对不起，用户名或密码不能为空！");
				return map;
			}
			if(userid.equals("administrator") && userpass.equals("123456")){
				UserData ud=new UserData();
				ud.setUserid(userid);
				ud.setUsername("超级管理员");
				session.setAttribute("loginid", loginid);
				map.put("flag", true);
				map.put("reason", "登录成功！");
				map.put("result", ud);
				map.put("loginDate", sdf.format(new Date()));
				return map;
			}
			m.put("userid", userid);
			m.put("userpass", userpass);
			Map<String,Object> userdata=iuds.getLoginCheckService(m);
			if(userdata!=null && !"".equals(userdata)){
				map.put("flag", true);
				map.put("reason", "登录成功！");
				map.put("result", userdata);
				map.put("loginDate", sdf.format(new Date()));
				session.setAttribute("loginid", loginid);
			}else{
				map.put("flag", false);
				map.put("reason", "对不起，用户名或密码有误或账号已锁定！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	@ApiOperation(httpMethod="POST",value="接口说明：新增接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="username",value="用户名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="roleid",value="所属角色id",required=false,dataType="Integer",paramType="path"),
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="deleted",value="是否启用:1启用,1禁用",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="file",value="logo图标：base64格式",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="userpass",value="用户密码",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="新增",remark="新增用户")
	@RequestMapping(value="/insert",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> insert(String file,String obj,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			UserData record=JSON.parseObject(obj, UserData.class);
			UserData user=iuds.selectByPrimaryKeyService(record.getUserid());
			if(user!=null && !"".equals(user)){
				map.put("flag", false);
				map.put("reason", "对不起，该用户已存在了！");
				return map;
			}
			if(file!=null && !file.isEmpty()){
				MultipartFile mfile=ImageSizeUtil.base64ToMultipart(file);
				byte[] bytes=ImageSizeUtil.getFileBytes(mfile);
				record.setLogo(bytes);
			}
			int i=iuds.insertSelectiveService(record);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "添加成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "添加失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	@ApiOperation(httpMethod="POST",value="接口说明：修改接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=true,dataType="String",paramType="path"),
		@ApiImplicitParam(name="username",value="用户名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="roleid",value="所属角色id",required=false,dataType="Integer",paramType="path"),
		@ApiImplicitParam(name="unitno",value="所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="deleted",value="是否启用:1启用,1禁用",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="file",value="logo图标：base64格式",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="userpass",value="用户密码",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="更新",remark="更新用户")
	@RequestMapping(value="/update",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> update(String file,String obj,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			UserData record=JSON.parseObject(obj, UserData.class);
			if(file!=null && !file.isEmpty()){
				MultipartFile mfile=ImageSizeUtil.base64ToMultipart(file);
				byte[] bytes=ImageSizeUtil.getFileBytes(mfile);
				record.setLogo(bytes);
			}
			int i=iuds.updateByPrimaryKeySelectiveService(record);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "更新成功！");
				map.put("result", record);
			}else{
				map.put("flag", false);
				map.put("reason", "更新失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	@ApiOperation(httpMethod="POST",value="接口说明：重置密码接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=true,dataType="String",paramType="path"),
		@ApiImplicitParam(name="userpass",value="用户密码",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="修改",remark="重置密码接口")
	@RequestMapping(value="/resetPass",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> resetPass(UserData record,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			int i=iuds.updateByPrimaryKeySelectiveService(record);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "更新成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "更新失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	
	
	@ApiOperation(httpMethod="POST",value="接口说明：删除接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=true,dataType="String",paramType="path"),
		@ApiImplicitParam(name="loginid",value="登录用户id",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="删除",remark="删除用户")
	@RequestMapping(value="/delete",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> delete(String userid,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		try{
			int i=iuds.deleteByPrimaryKeyService(userid);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "删除成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "删除失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	 
	/**
	 * 修改密码
	 * @param resp
	 * @param userid
	 * @param oldpass
	 * @param newpass
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：修改密码接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="userid",value="用户id",required=true,dataType="String",paramType="path"),
		@ApiImplicitParam(name="oldpass",value="旧密码",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="newpass",value="新密码",required=false,dataType="String",paramType="path")})
	@MethodLog(methodName="修改",remark="修改用户密码")
	@RequestMapping(value="/updatePass",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> updatPass(String userid,String oldpass,String newpass,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			m.put("userid", userid);
			m.put("userpass", oldpass);
			Map<String,Object> mdata=iuds.getLoginCheckService(m);
			if(mdata==null || "".equals(mdata)){
				map.put("flag", true);
				map.put("reason", "对不起，原密码输入有误！");
				return map;
			}
			UserData data=new UserData();
			data.setUserpass(newpass);
			data.setUserid(userid);
			int i=iuds.updateByPrimaryKeySelectiveService(data);
			if(i>0){
				map.put("flag", true);
				map.put("reason", "修改密码成功！");
			}else{
				map.put("flag", false);
				map.put("reason", "修改密码失败！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	/**
	 * 查询列表
	 * @param record
	 * @return
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：查询列表接口",notes="接口的notes说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="curpage",value="当前页数",required=false,dataType="Integer",paramType="path"),
		@ApiImplicitParam(name="pagesize",value="每页显示数",required=false,dataType="Integer",paramType="path"),
		@ApiImplicitParam(name="userid",value="用户id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="username",value="用户名称",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="name",value="用户名称：模糊查询时的传参",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="roleid",value="用户的角色id",required=false,dataType="Integer",paramType="path"),
		@ApiImplicitParam(name="unitno",value="用户所属单位id",required=false,dataType="String",paramType="path"),
		@ApiImplicitParam(name="loginid",value="用户id：登录人的账号",required=false,dataType="String",paramType="path")})
	@RequestMapping(value="/getList",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getList(UserData record,String name,String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			System.out.println("登录人id：");
			System.out.println(request.getSession().getAttribute("loginid"));
			if(loginid!=null && !"".equals(loginid) && "administrator".equals(loginid)){
				loginid="";
			}
			m.put("loginid", loginid);
			m.put("userid", record.getUserid());
			m.put("username", record.getUsername());
			m.put("unitno", record.getUnitno());
			m.put("roleid", record.getRoleid());
			m.put("name", name);
			List<Map<String,Object>> list=iuds.getListService(m);
			int count=iuds.getListCountService(m);
			if(list!=null && list.size()>0){
				map.put("flag", true);
				map.put("reason", "查询成功！");
				map.put("result", list);
				map.put("count", count);
			}else{
				map.put("flag", false);
				map.put("reason", "暂无数据可查！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序错误，请联系管理员！");
		}
		return map;
	}//end
	
	/**
	 * 获取登录人的权限
	 * getMyMenu
	 */
	@ApiOperation(httpMethod="POST",value="接口说明：获取登录人的菜单权限接口",notes="接口的note说明")
	@ApiImplicitParams({
		@ApiImplicitParam(name="loginid",value="登录人账号id",required=true,dataType="String",paramType="path")
		})
	@RequestMapping(value="/getMyMenu",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getMyPerm(String loginid){
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		try{
			m.put("loginid", loginid);
			List<Map<String,Object>> list=iuds.getMyMenuService(m);
			if(list!=null && list.size()>0){
				map.put("flag", true);
				map.put("reason", "查询成功！");
				map.put("result", list);
			}else{
				map.put("flag", false);
				map.put("reason", "暂无数据可查！");
			}
		}catch(Exception ex){
			map.put("flag", false);
			System.out.println(ex);
			map.put("reason", "程序异常，请联系管理员！");
		}
		return map;
	}//end
	 
}
