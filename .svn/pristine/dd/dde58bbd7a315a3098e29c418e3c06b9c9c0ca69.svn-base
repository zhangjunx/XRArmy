package com.xr.https;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSON;
import com.xr.tools.ImagePathConfig;

public class HttpUtils {
	
	//JSON方式的调用 （这里入参我是选用了Map类型 然后通过JSON转了一下，非常人性化）
	   public static Map post(String url, Map body) {

	      HttpPost httpPost = new HttpPost(url);
	      httpPost.addHeader("Content-Type", "application/json");
	      httpPost.addHeader("Accept", "application/json");
	      StringEntity entity = new StringEntity(Objects.requireNonNull(JSON.toJSONString(body)), "utf-8");
	      entity.setContentEncoding("UTF-8");
	      entity.setContentType("application/json");
	      httpPost.setEntity(entity);
	      return doExecute(httpPost);
	   }


	   //form-data类型  这个的入参因为我的需求是JSON数据 所以我这边入参选用了LIST<MAP>
	   public static Map postTst(String url, List<Map> body){
	      HttpPost httpPost = new HttpPost(url);
	      MultipartEntityBuilder builder = MultipartEntityBuilder.create();

	      //注意这里 首先我这边没有设置http请求头 如果不加contenType的话 会出现参数乱码
	      ContentType contentType = ContentType.create("text/plain", "UTF-8");

	      //这里依然是使用addTextBoby的方式带有contentType的方法
	      builder.addTextBody("params",JSON.toJSONString(body),contentType);
	      httpPost.setEntity(builder.build());
	      return doExecute(httpPost);
	   }

	   private static Map doExecute(HttpUriRequest request) {
	      try {
	         CloseableHttpClient httpClient = HttpClients.createDefault();
	         HttpResponse httpResponse;

	         httpResponse = httpClient.execute(request);
	         int httpResponseCode = httpResponse.getStatusLine().getStatusCode();
	         if (httpResponseCode != 200) {
	            //log.error("doExecute. httpResponseCode={}, request={}", httpResponseCode, request);
	         }
	         String resultString = EntityUtils.toString(httpResponse.getEntity(), "utf-8");
	         return JSON.parseObject(resultString, Map.class);
	      } catch (Exception e) {
	         //log.error("doExecute error:", e);
	         return null;
	      }
	   }

	   private static String doExecuteTest(HttpUriRequest request) {
	      try {
	         CloseableHttpClient httpClient = HttpClients.createDefault();
	         HttpResponse httpResponse;

	         httpResponse = httpClient.execute(request);
	         int httpResponseCode = httpResponse.getStatusLine().getStatusCode();
	         if (httpResponseCode != 200) {
	            //log.error("doExecute. httpResponseCode={}, request={}", httpResponseCode, request);
	         }
	         return  EntityUtils.toString(httpResponse.getEntity(), "utf-8");
	      } catch (Exception e) {
	        // log.error("doExecute error:", e);
	         return null;
	      }
	   }


	   public static void main(String[] args) {
	      List<Map> list =new ArrayList<>();
	      String photostr="blackp_11.jpeg";
	      String imgUrl=ImagePathConfig.blackpeoplepic+"/"+photostr;
		  String base64=ImagePathConfig.readPicPath(imgUrl);
	      Map map = new HashMap();
	      map.put("personnel_id_number","B_22");
	      map.put("personnel_name","B念昔");
	      map.put("personnel_phone","");
	      map.put("personnel_pic1",base64);
	      list.add(map);
	      String url="http://192.168.1.236/yunapi/?action=personnel";
	      Map post = postTst(url, list);
	      System.out.println("post--->"+post);
	   }

}
