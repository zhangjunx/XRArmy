package com.xr.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import com.alibaba.fastjson.JSONObject;
import com.xr.entry.DeviceUnit;
import com.xr.service.IDeviceUnitService;

import io.swagger.annotations.Api;
@Controller
@RequestMapping("BoxPlat")
@Api(tags="BoxPlat",description="接口标题：盒子平台对接接口")
public class BoxPlatController {
	@Autowired
	private IDeviceUnitService idus;
	
	
	public static void main(String[] args) throws Exception {
		//getDev();
	}
	
	/**
	 * 同步盒子设备查询接口
	 */
	@RequestMapping(value="/getDev",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> getDev() throws Exception{
		Map<String, String> m=new HashMap<String,String>();
		String url="http://192.168.1.147/yunapi/?action=device";
		String result= netGet(url,m,"GET");
		System.out.println(result);
		return null;
	}
	
	/**
	 * 同步盒子设备新增接口  ： 
	 * @throws Exception 
	 */
	@RequestMapping(value="/addDev",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> addDev(Integer deviceno) throws Exception{
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> m=new HashMap<String,Object>();
		String url="http://192.168.1.147/yunapi/?action=device";
		DeviceUnit record=idus.selectByPrimaryKeyService(deviceno);
		m.put("device_id", record.getDeviceno());
		m.put("device_name", record.getDevicename());
		m.put("device_type", record.getDevicetype());
		m.put("device_vender", record.getDevicevender());
		m.put("device_no", record.getDevicesn());
		m.put("device_mac", record.getDevicemodel());
		m.put("device_ip", record.getIp());
		m.put("device_port", record.getPort());
		m.put("device_username", record.getUsername());
		m.put("device_password", record.getUserpass());
		m.put("device_status", "1");//1启用，0停用
		String iostatus=record.getIostatus();
		if(iostatus.equals("11")){
			iostatus="1";
		}if(iostatus.equals("12")){
			iostatus="2";
		}else{
			iostatus="0";
		}
		m.put("device_direction", iostatus);//1入，2出，0未知
		String result= netPost(url,m,"POST");
		map=JSONObject.parseObject(result);
		System.out.println(result);
		return map;
	}
	
	
	 
	/**
	 * 同步盒子设备修改接口
	 */
	@RequestMapping(value="/editDev",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> editDev(Integer deviceno) throws Exception{
		Map<String,Object> m=new HashMap<String,Object>();
		String url="http://192.168.1.147/yunapi/?action=device";
		DeviceUnit record=idus.selectByPrimaryKeyService(deviceno);
		m.put("device_id", record.getDeviceno());
		m.put("device_name", record.getDevicename());
		m.put("device_type", record.getDevicetype());
		m.put("device_vender", record.getDevicevender());
		m.put("device_no", record.getDevicesn());
		m.put("device_mac", record.getDevicemodel());
		m.put("device_ip", record.getIp());
		m.put("device_port", record.getPort());
		m.put("device_username", record.getUsername());
		m.put("device_password", record.getUserpass());
		m.put("device_status", "1");//1启用，0停用
		String iostatus=record.getIostatus();
		if(iostatus.equals("11")){
			iostatus="1";
		}if(iostatus.equals("12")){
			iostatus="2";
		}else{
			iostatus="0";
		}
		m.put("device_direction", iostatus);//1入，2出，0未知
		String result= netPost(url,m,"PATCH");
		System.out.println(result);
		return null;
	}
	
	
	/**
	 * 同步盒子设备删除接口
	 */
	@RequestMapping(value="/delDev",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> delDev(Integer deviceno) throws Exception{
		Map<String,Object> m=new HashMap<String,Object>();
		String url="http://192.168.1.147/yunapi/?action=device";
		m.put("device_id", deviceno);
		String result= netPost(url,m,"DELETE");
		System.out.println(result);
		return null;
	}
	
	/**
	 * 请求连接
	 * @throws Exception
	 */
	public static String netPost(String urlStr, Map<String, Object> map, String method) throws Exception {
		 JSONObject jsonObj=new JSONObject(map);
		 String params = jsonObj.toString();
	     URL url = new URL(urlStr);
		 // 打开和URL之间的连接
		 HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		 connection.setConnectTimeout(8000);
		 // 设置通用的请求属性
		 connection.setRequestMethod(method);
		 connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
		 connection.setRequestProperty("Connection", "Keep-Alive");
		 //connection.setRequestProperty("token", token);
		 connection.setUseCaches(false);
		 connection.setDoOutput(true);
		 connection.setDoInput(true);
	
		 // 得到请求的输出流对象
		 DataOutputStream out = new DataOutputStream(connection.getOutputStream());
		 out.write(params.getBytes("UTF-8"));
		 out.flush();
		 out.close();
		 // 建立实际的连接
		 connection.connect();
		 // 获取所有响应头字段
		 Map<String, List<String>> headers = connection.getHeaderFields();
		 // 遍历所有的响应头字段
		 for (String key : headers.keySet()) {
			 //System.out.println(key + "--->" + headers.get(key));
		 }
		 // 定义 BufferedReader输入流来读取URL的响应
		 BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
		 String result = "";
		 String getLine;
		 while ((getLine = in.readLine()) != null) {
			 result += getLine;
		 }
		 in.close();
		 JSONObject jsonObject = JSONObject.parseObject(result);
		 //System.out.println(jsonObject);
		 String str=jsonObject.toString();
		 //Map<String, Object> resultMap = (Map) jsonObject;
		 return str;
	}
	
	 /*
     * @param strUrl 请求地址
     * @param params 请求参数
     * @param method 请求方法
     * @return  网络请求字符串
     * @throws Exception
     */
    public static String netGet(String strUrl, Map<String,String> params,String method) throws Exception {
        HttpURLConnection conn = null;
        BufferedReader reader = null;
        String rs = null;
        try {
            StringBuffer sb = new StringBuffer();
            if(method==null || method.equals("GET")){
                strUrl = strUrl+"?"+urlencode(params);
            }
            URL url = new URL(strUrl);
            conn = (HttpURLConnection) url.openConnection();
            if(method==null || method.equals("GET")){
                conn.setRequestMethod("GET");
            }else{
                conn.setRequestMethod("POST");
                conn.setDoOutput(true);
            }
           // conn.setRequestProperty("User-agent", userAgent);
            
            
		    conn.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
			//conn.setRequestProperty("token", token);
            conn.setUseCaches(false);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            conn.setInstanceFollowRedirects(false);
            conn.connect();
            if (params!= null && method.equals("POST")) {
                try {
                    DataOutputStream out = new DataOutputStream(conn.getOutputStream());
                    out.writeBytes(urlencode(params));
                } catch (Exception e) {
                    // TODO: handle exception
                    e.printStackTrace();
                }
                 
            }
            InputStream is = conn.getInputStream();
            reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
            String strRead = null;
            while ((strRead = reader.readLine()) != null) {
                sb.append(strRead);
            }
            rs = sb.toString();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                reader.close();
            }
            if (conn != null) {
                conn.disconnect();
            }
        }
        return rs;
    }
	
	
 
    /**
     * 将map型转为请求参数型
     * @param data
     * @return
     */
    public static String urlencode(Map<String,String> data) {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry i : data.entrySet()) {
            try {
                sb.append(i.getKey()).append("=").append(URLEncoder.encode(i.getValue()+"","UTF-8")).append("&");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
	
	
	
	
	
}


